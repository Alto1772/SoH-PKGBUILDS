diff --git a/libultraship/libultraship/CMakeLists.txt b/libultraship/libultraship/CMakeLists.txt
index f4090cef..230986da 100644
--- a/libultraship/libultraship/CMakeLists.txt
+++ b/libultraship/libultraship/CMakeLists.txt
@@ -541,6 +541,7 @@ elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU|Clang|AppleClang")
 			">"
 			"ENABLE_OPENGL;"
             "SPDLOG_ACTIVE_LEVEL=0;"
+            "SHIP_BASE_PATH=\"${CMAKE_INSTALL_PREFIX}\";"
 	)
 endif()
 ################################################################################
diff --git a/libultraship/libultraship/Window.cpp b/libultraship/libultraship/Window.cpp
index d731b797..e4015a4a 100644
--- a/libultraship/libultraship/Window.cpp
+++ b/libultraship/libultraship/Window.cpp
@@ -58,8 +58,8 @@ extern "C" {
         }
 
     #ifndef __SWITCH__
-        const char* controllerDb = "gamecontrollerdb.txt";
-        int mappingsAdded = SDL_GameControllerAddMappingsFromFile(controllerDb);
+        std::string controllerDb = Ship::Window::GetPathRelativeToAppBaseDirectory("gamecontrollerdb.txt");
+        int mappingsAdded = SDL_GameControllerAddMappingsFromFile(controllerDb.c_str());
         if (mappingsAdded >= 0) {
             SPDLOG_INFO("Added SDL game controllers from \"{}\" ({})", controllerDb, mappingsAdded);
         } else {
@@ -323,17 +323,37 @@ namespace Ship {
 
 #ifdef __linux__
         char* fpath = std::getenv("SHIP_HOME");
-        if (fpath != NULL)
+        if (fpath != NULL) {
             return std::string(fpath);
+        }
+
+        fpath = SDL_GetPrefPath(NULL, "soh");
+        if (fpath != NULL) {
+            std::string ret(fpath);
+            SDL_free(fpath);
+            return ret;
+        }
 #endif
 
         return ".";
     }
 
+    std::string Window::GetAppBaseDirectoryPath() {
+#ifdef SHIP_BASE_PATH
+        return SHIP_BASE_PATH;
+#else
+        return GetAppDirectoryPath();
+#endif
+    }
+
     std::string Window::GetPathRelativeToAppDirectory(const char* path) {
         return GetAppDirectoryPath() + "/" + path;
     }
 
+    std::string Window::GetPathRelativeToAppBaseDirectory(const char* path) {
+        return GetAppBaseDirectoryPath() + "/" + path;
+    }
+
     void Window::StartFrame() {
         gfx_start_frame();
     }
@@ -580,8 +600,8 @@ namespace Ship {
     }
 
     void Window::InitializeResourceManager(const std::vector<std::string>& OTRFiles, const std::unordered_set<uint32_t>& ValidHashes) {
-        MainPath = Config->getString("Game.Main Archive", GetAppDirectoryPath());
-        PatchesPath = Config->getString("Game.Patches Archive", GetAppDirectoryPath() + "/mods");
+        MainPath = Config->getString("Game.Main Archive", GetAppBaseDirectoryPath());
+        PatchesPath = Config->getString("Game.Patches Archive", GetAppBaseDirectoryPath() + "/mods");
         if (OTRFiles.empty()) {
             ResMan = std::make_shared<ResourceMgr>(GetInstance(), MainPath, PatchesPath, ValidHashes);
         } else {
diff --git a/libultraship/libultraship/Window.h b/libultraship/libultraship/Window.h
index 490a1e0c..59fda86c 100644
--- a/libultraship/libultraship/Window.h
+++ b/libultraship/libultraship/Window.h
@@ -20,7 +20,9 @@ namespace Ship {
 			static std::shared_ptr<Window> GetInstance();
 			static std::shared_ptr<Window> CreateInstance(const std::string Name, const std::vector<std::string>& OTRFiles = {}, const std::unordered_set<uint32_t>& ValidHashes = {});
 			static std::string GetAppDirectoryPath();
+			static std::string GetAppBaseDirectoryPath();
 			static std::string GetPathRelativeToAppDirectory(const char* path);
+			static std::string GetPathRelativeToAppBaseDirectory(const char* path);
 
 			Window(std::string Name);
 			~Window();
diff --git a/soh/soh/OTRGlobals.cpp b/soh/soh/OTRGlobals.cpp
index 7a5ba86c..dc588c6a 100644
--- a/soh/soh/OTRGlobals.cpp
+++ b/soh/soh/OTRGlobals.cpp
@@ -78,15 +78,15 @@ ItemTableManager* ItemTableManager::Instance;
 
 OTRGlobals::OTRGlobals() {
     std::vector<std::string> OTRFiles;
-    std::string mqPath = Ship::Window::GetPathRelativeToAppDirectory("oot-mq.otr");
+    std::string mqPath = Ship::Window::GetPathRelativeToAppBaseDirectory("oot-mq.otr");
     if (std::filesystem::exists(mqPath)) { 
         OTRFiles.push_back(mqPath);
     } 
-    std::string ootPath = Ship::Window::GetPathRelativeToAppDirectory("oot.otr");
+    std::string ootPath = Ship::Window::GetPathRelativeToAppBaseDirectory("oot.otr");
     if (std::filesystem::exists(ootPath)) {
         OTRFiles.push_back(ootPath);
     }
-    std::string patchesPath = Ship::Window::GetPathRelativeToAppDirectory("mods");
+    std::string patchesPath = Ship::Window::GetPathRelativeToAppBaseDirectory("mods");
     if (patchesPath.length() > 0 && std::filesystem::exists(patchesPath)) {
         if (std::filesystem::is_directory(patchesPath)) {
             for (const auto& p : std::filesystem::recursive_directory_iterator(patchesPath)) {
