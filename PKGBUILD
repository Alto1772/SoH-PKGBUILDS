# Maintainer: AltoXorg <atrl101 AT yahoo DOT com>

_reponame=Shipwright
pkgbase=soh
pkgname=(soh soh-otr-exporter)
pkgver=4.0.5
pkgrel=1
arch=("x86_64" "i686")
url="https://github.com/HarbourMasters/${_reponame}"
depends=("sdl2" "sdl2_net" "libpulse" "libpng")
makedepends=("cmake" "ninja" "python" "curl" "lsb-release" "libxrandr" "libxinerama" "libxi" "glu")
source=("${url}/archive/refs/tags/${pkgver}.tar.gz"
        "soh.desktop"
        "soh-install-paths.patch"
        "otrgui-wrapper.sh"
        "assets-headers-gc_nmq_pal_f.tar.xz")
sha256sums=('dddea7c0596a626d60d633434e1e8d458f679a970311fbd0aece2a44d13e5749'
            'd93dbc5273eb6ab88aa4d99869a6ba7fce495253a953af269c28ec72c0b00eb6'
            '0799db949811ee9b3cd4d4bdf2c2609339409e0d5df93fd195f4fc6e9b324701'
            '6e735877e7bba81f9f308f6eabbdfe5354f2c331a9acf9a16ab02a5681f2c25f'
            'a60bdcf977fe32bdf69dd3c74e2ad20de7178bb8ed97e7f0846f1f158aac3953')

SHIP_PREFIX=/opt/soh

prepare() {
  cd "${srcdir}/${_reponame}-${pkgver}"

  # Required asset headers generated by ZAPD/TR so we don't require a rom to create these files.
  # Only needed headers are present to compensate file size requirements.
  tar -Jxf ../assets-headers-gc_nmq_pal_f.tar.xz
  # Refer to soh-git's PKGBUILD for creating the header archive.

  ## check for any roms in the directory where PKGBUILD resides
  ## and copy them to Shipwright/OTRExporter. It doesn't matter
  ## which rom we'll be using, let extract_assets.py do the guessing.
  #roms=( "${startdir}/"*.*64 )
  #if (( "${#roms[@]}" )); then
  #  cp "${roms[@]}" OTRExporter
  #else
  #  echo "NO ROMS FOUND! Please place them in \"${startdir}\"."
  #  return 1
  #fi

  patch -Np1 -i "${srcdir}/soh-install-paths.patch"
}

build() {
  cd "${srcdir}/${_reponame}-${pkgver}"

  CFLAGS="${CFLAGS/-Werror=format-security/}" \
  CXXFLAGS="${CXXFLAGS/-Werror=format-security/}" \
    cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$SHIP_PREFIX .

  cd build
  ninja ZAPD

  #( cd ../OTRExporter; ./extract_assets.py -z ../build/ZAPD/ZAPD.out <<< "1"; )
  ninja soh

  ninja OTRGui
}

package_soh() {
  pkgdesc="A port of The Legend of Zelda Ocarina of Time for PC, Wii U, and Switch"
  depends=("sdl2" "sdl2_net" "libpulse")
  license=("unknown")
  install=soh.install

  cd "${srcdir}/${_reponame}-${pkgver}"
  cd build
  DESTDIR="${pkgdir}" ninja soh/install

  install -dm755 "${pkgdir}/usr/bin/"

  ln -s /opt/soh/soh.elf "${pkgdir}/usr/bin/soh"
  install -Dm644 "${srcdir}/soh.desktop" -t "${pkgdir}/usr/share/applications"
  install -Dm644 ../soh/macosx/sohIcon.png "${pkgdir}/usr/share/pixmaps/soh.png"
}

package_soh-otr-exporter() {
  pkgdesc="OTR generation tools for SoH"
  license=("MIT")
  depends=("libpng")
  optdepends=("zenity: OTRGui file chooser"
              "kdialog: OTRGui file chooser (KDE)")

  cd "${srcdir}/${_reponame}-${pkgver}"
  cd build

  DESTDIR="${pkgdir}" ninja OTRGui/install

  install -dm755 "${pkgdir}/usr/bin/"
  install -Dm755 "${srcdir}/otrgui-wrapper.sh" "${pkgdir}/usr/bin/OTRGui"
  ln -s /opt/soh/assets/extractor/ZAPD.out "${pkgdir}/usr/bin/ZAPD"
}
